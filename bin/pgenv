#!env bash

# Released versions:
# 8.0.26
# 8.1.23
# 8.2.23
# 8.3.23
# 8.4.22
# 9.0.19
# 9.1.24
# 9.2.24
# 9.3.23
# 9.4.18
# 9.5.13
# 9.6.9
# 10.4
# 11beta2

# https://stackoverflow.com/a/19622569/79202
trap 'exit' ERR
set -E

# Set PGENV_ROOT only if not already set.
if [ -z "$PGENV_ROOT" ]; then
    PGENV_ROOT=$(dirname $(dirname $0))
else
    echo "Using PGENV_ROOT $PGENV_ROOT"
fi

cd $PGENV_ROOT
# Always use an absolute path or configure could complain.
PGENV_ROOT=$(pwd)

PGSQL=$PGENV_ROOT/pgsql
PG_DATA=$PGSQL/data
PG_LOG=$PG_DATA/server.log
PGENV_DOWNLOAD_ROOT='https://ftp.postgresql.org/pub/source/'

# temporary  check file
PGENV_CHECK_FILE=$( mktemp ${PGENV_ROOT}/pgenv.check.XXXXX )

# Now -w because 9.0 and earlier always time out even when successful.
PG_CTL="$PGSQL/bin/pg_ctl -D $PG_DATA"
PGENV_PG_USER="postgres"
INITDB="$PGSQL/bin/initdb -U $PGENV_PG_USER --locale en_US.UTF-8 --encoding UNICODE -D $PG_DATA"

# Ensure all temporary files
# are removed on exit
trap "exit_cleanup" EXIT

exit_cleanup(){
    if [ -f "$PGENV_CHECK_FILE" ]; then
        rm -f "$PGENV_CHECK_FILE"
    fi
}

# Prints a debug message if PGENV_DEBUG
# variable enabled
pgenv_debug(){
    if [ ! -z "$PGENV_DEBUG" ]; then
        echo "[DEBUG] $1" >&2
    fi
}

pgversions() {
    if [ -e "pgsql" ]; then
        local curr=$(readlink pgsql)
    fi
    local installed=0
    local flags=""
    for dir in $( ls -d pgsql-* ); do
        if [ "$dir" = "$curr" ]; then
            flags=" *"
        else
            flags="  "
        fi

        local version=$( echo $dir | sed 's/^pgsql-//' )
        printf "%2s   %6s    %s\n" "$flags" "$version" "$dir"
        installed=$(( installed + 1 ))
    done

    if [ $installed -eq 0 ]; then
        echo "No version installed!"
    fi
}

pgenvhelp() {
        cat <<EOF
Usage: pgenv <command> [<args>]

The pgenv commands are:
    use        Set and start the current PostgreSQL version
    clear      Stop and unset the current PostgreSQL version
    start      Start the current PostgreSQL server
    stop       Stop the current PostgreSQL server
    restart    Restart the current PostgreSQL server
    build      Build a specific version of PostgreSQL
    remove     Remove a specific version of PostgreSQL
    version    Show the current PostgreSQL version
    versions   List all PostgreSQL versions available to pgenv
    help       Show this usage statement and command summary
    available  Show which versions can be downloaded (most recent versions last)
    check      Check all program dependencies

For full documentation, see: https://github.com/theory/pgenv#readme
EOF
}


# Accepts the name of a command and the path to the executable for that command.
# Prints a line in to temporary file (which must already exist) with an OK or KO
# for the command.
pgenv_detail_command(){
    local command_name=$1
    local command=$2
    local status="OK"

    if [ -z "$command" ]; then
        status="KO"
        command="not found!"
    fi

    printf "[%2s] %10s : %s\n" "$status" "$command_name" "$command" >> $PGENV_CHECK_FILE
}

# Searches for all dependencies and prints a line for each command to a file.
# Prints a list of missing commands. If none are missing and the argument is
# not null, it prints the paths for all commands.
pgenv_check_dependencies(){
    local verbose=$1
    # Don't exit on error.
    trap "" ERR

    PGENV_MAKE=$(which make)
    if [ -z "$PGENV_MAKE" ]; then
        PGENV_MAKE=$(which gmake)
    fi
    pgenv_detail_command "make" $PGENV_MAKE

    PGENV_CURL=$(which curl)
    pgenv_detail_command "curl" $PGENV_CURL

    PGENV_PATCH=$(which patch)
    pgenv_detail_command "patch" $PGENV_PATCH

    PGENV_SED=$(which sed)
    pgenv_detail_command "sed" $PGENV_SED

    PGENV_PERL=$(which perl)
    pgenv_detail_command "Perl 5" $PGENV_PERL

    PGENV_TAR=$(which tar)
    pgenv_detail_command "tar" $PGENV_TAR

    # Go back to exiting on error.
    missing=$( grep -c 'KO' $PGENV_CHECK_FILE )

    if [ $missing -gt 0 ]; then
        echo "Missing $missing dependencies:"
        grep 'KO' $PGENV_CHECK_FILE
        exit 1
    fi

    if [ ! -z "$verbose" ]; then
        cat $PGENV_CHECK_FILE
    fi

    # re-enable error handling
    trap 'exit' ERR
}

# This function checks for its first argument to be
# a valid PostgreSQL number, soemthing like 10.5 or 9.5.4.
# In case no version number is specified, or the
# version number is not valid (e.g., 10, 0.9) the
# function aborts the script.
# If no version at all is specified, the `pgversions` function
# is invoked to display the user with available versions.
pgenv_input_version_or_exit() {
    local version=$1

    if [ -z "$version" ]; then
        echo "Which version of PostgreSQL do you want?"
        pgversions
        exit 1
    fi

    if [[ $version =~ ^[1-9][0-9]?\.[0-9]+.?[0-9]?$ ]]; then
        return
    elif [[ $version =~ ^[1-9][1-9]beta[1-9]?$ ]]; then
        return
    else
        echo "Specified version <$version> does not appear to be a PostgreSQL valid version number"
        exit 1
    fi
}

# This function accepts a version number (that should
# have been already checked to be valid)
# and searches for an installation with such
# a version. If no installation with such version number
# has been found, the script aborts after
# showing installed versions
pgenv_installed_version_or_exit(){
    local version=$1

    if [ ! -e "pgsql-${version}" ]; then
        echo "PostgreSQL $version not installed; installed versions:"
        pgversions
        exit 1
    fi

}

case $1 in
    use)
        v=$2

        pgenv_input_version_or_exit $v
        pgenv_installed_version_or_exit $v


        # Check if current version?
        if [ "`readlink pgsql`" = "pgsql-$v" ]; then
            echo "Already using PostgreSQL $v"
        else
            # Shut down existing running instance.
            if [ -e "pgsql" ]; then
                if $PG_CTL status &> /dev/null; then
                    $PG_CTL stop
                fi
            fi

            # Link the new instance.
            ln -nsf pgsql-$2 pgsql
        fi

        # Init if needed.
        if [ ! -d $PG_DATA ]; then
            $INITDB
        fi

        # Start er up!
        if ! $PG_CTL status &> /dev/null; then
            $PG_CTL start -l $PG_LOG
            echo "PostgreSQL $v started"
            echo "Logs are in [$PG_LOG]"
        fi
        exit
        ;;

    start)
        # Do we have a current version?
        if [ ! -e "pgsql" ]; then
            echo "No current version of PostgreSQL"
            echo "Run \`pgenv use \$version\` to link and start a specific version"
            echo "Run \`pgenv versions\` to list all installed versions"
            exit 1
        else
            # get the version number for messages
            v=$( readlink pgsql | sed 's/^pgsql-//' )
        fi

        # Just stop if already running.
        if $PG_CTL status &> /dev/null; then
            echo "PostgreSQL $v is already running"
            exit
        fi

        # Init the database if needed.
        if [ ! -d $PG_DATA ]; then
            $INITDB
        fi

        # Start er up!
        trap "" ERR
        $PG_CTL start -w -l $PG_LOG
        if [ $? -eq 0 ]; then
            echo "PostgreSQL $v started"
            echo "Logs are in [$PG_LOG]"
        else
            echo "PostgreSQL $v NOT started, examine logs in $PG_LOG"
        fi

        exit
        ;;

    stop)
        # Shut down the server unless it's not running.
        if $PG_CTL status &> /dev/null; then
            $PG_CTL stop
            echo "PostgreSQL stopped"
        else
            echo "PostgreSQL not running"
        fi
        exit
        ;;

    restart)
        # Shut down the server unless it's not running.
        if $PG_CTL status &> /dev/null; then
            $PG_CTL restart -l $PG_LOG
            echo "PostgreSQL restarted"
        else
            $PG_CTL start -l $PG_LOG
            echo "PostgreSQL started"
        fi
        echo "Server logs are in [$PG_LOG]"
        exit
        ;;

    build)
        v=$2

        pgenv_input_version_or_exit $v

        # check for all dependencies
        pgenv_check_dependencies

        # check if the postgres user exists on this system
        # or claim
        trap "" ERR
        id -u $PGENV_PG_USER > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "You need to create the $PGENV_PG_USER user on this system to continue"
            exit 1
        fi
        trap 'exit' ERR

        # Skip it if we already have it.
        if [ -e "pgsql-$v" ]; then
            echo "PostgreSQL $v already built"
            exit
        fi

        # Switch to the src directory.
        if [ ! -e "src" ]; then
            mkdir src
        fi
        cd src

        # Download the source if wee don't already have it.
        # WARNING: older PostgreSQL used .tar.gz instead of .tar.bz2,
        # so if the version is behind 8 use the first format, otherwise
        # try to get the most compressed archive
        if [[ $v =~ ^[1-7]\. ]]; then
            PG_TARBALL="postgresql-$v.tar.gz"
            TAR_OPTS="zxf"
        else
            PG_TARBALL="postgresql-$v.tar.bz2"
            TAR_OPTS="jxf"
        fi

        if [ ! -f $PG_TARBALL ]; then
            $PGENV_CURL -fLO ${PGENV_DOWNLOAD_ROOT}/v$v/${PG_TARBALL}
        fi

        # Unpack the source.
        rm -rf "postgresql-$v"
        $PGENV_TAR $TAR_OPTS $PG_TARBALL
        cd postgresql-$v

        # Patch 8.1.
        if [[ $v =~ ^8\.[01]\. ]]; then
            $PGENV_PATCH -p1 <<EOF
--- a/src/pl/plperl/plperl.c
+++ b/src/pl/plperl/plperl.c
@@ -694,7 +694,7 @@
 		if (!isGV_with_GP(sv) || !GvCV(sv))
 			continue;
 		SvREFCNT_dec(GvCV(sv)); /* free the CV */
-		GvCV(sv) = NULL;		/* prevent call via GV */
+		GvCV_set(sv, NULL);		/* prevent call via GV */
 	}
 
 	hv_clear(stash);
EOF
        fi

        # Configure.
        ./configure --prefix=$PGENV_ROOT/pgsql-$v --with-perl PERL=$PGENV_PERL

        # make and make install
        if [[ $v =~ ^[1-8]\. ]]; then
            # 8.x (and prior versions ?) doesn't have `make world`.
            $PGENV_MAKE -j3
            $PGENV_MAKE install
            cd contrib
            $PGENV_MAKE -j3
            $PGENV_MAKE install
        else
            # Yay, make world!
            $PGENV_MAKE world -j3
            $PGENV_MAKE install-world
        fi

        echo "PostgreSQL $v built"
        exit
        ;;

    clear)
        if $PG_CTL status &> /dev/null; then
            $PG_CTL stop
            echo "PostgreSQL stopped"
        fi
        if [ -e "pgsql" ]; then
            rm -f pgsql
            echo "PostgreSQL cleared"
        else
            echo "No version of PostgreSQL is currently active"
        fi
        exit
        ;;

    remove)
        v=$2

        pgenv_input_version_or_exit $v
        pgenv_installed_version_or_exit $v


        if [ "`readlink pgsql`" = "pgsql-$v" ]; then
            echo "PostgreSQL $v currently in use"
            echo "Run \`pgenv clear\` to clear it"
            echo "or \`pgenv use\` to switch to another version"
            exit 1
        fi

        rm -fr "pgsql-$v"
        rm -fr src/postgresql-$v.tar.* # could be .tar.bz2 or .tar.gz
        rm -fr src/postgresql-$v
        echo "PostgreSQL $v removed"
        exit
        ;;

    version)
        if [ -e "pgsql" ]; then
            readlink pgsql
        else
            echo "No version of PostgreSQL currently in use"
        fi
        exit
        ;;

    versions)
        pgversions
        exit
        ;;

    help)
        pgenvhelp
        exit
        ;;

    available)
        shift # remove the command from the argument list
        echo -e "         Available PostgreSQL versions"
        echo -e "==============================================\n"

        # there should be a simpler single regexp...
        # First of all download the page with the links to each version (href=va.b.c/)
        # and trim out each version, then extract the major version
        # and append each version to an hash indexed by the major version number
        for version in $( curl -s $PGENV_DOWNLOAD_ROOT \
                              | grep -o '<a href=['"'"'"][^"'"'"']*['"'"'"]' \
                              | sed -e 's/^<a href=["'"'"']//' -e 's/["'"'"']$//' \
                              | sed 's/^v//' \
                              | sed 's/\/$//')
        do
            major=$( echo $version | sed 's/\([[:digit:]]\{1,2\}\).*/\1/' )
            pgenv_debug "Extracted major version [$major]"

            # check the version is a number!
            if [[ $major =~ ^[0-9]+$ ]] ; then
                # Since PostgreSQL 10, a major version is
                # made by only the first number
                # (apply the same logic for old versions)
                # here the major version is considered as multipled
                # by a ten factor, so that version 10 becomes value 100
                # while version 9.6 becomes 96
                if [ $major -ge 10 -o $major -le 6 ]; then
                    minor=0
                else
                    minor=$( echo $version | sed 's/[[:digit:]]\.\([[:digit:]]\{1,2\}\).*/\1/' )
                fi
                major=$(( major * 10 + minor ))
                pgenv_debug "Normalized major version [$major]"
                # append the current version to the hash
                # indexed by the major version
                versions_hash[ "$major" ]+="${version}-"
            fi
        done

        # check to have some version in the hash, or
        # the download did go wrong
        keys=$( echo ${!versions_hash[@]} )
        if [ -z "$keys" ]; then
            echo "No available versions found at URL <$PGENV_DOWNLOAD_ROOT>"
            pgenv_debug "Hash content: ${!versions_hash[@]}"
            exit 1
        fi

        # read back the versions and display the output
        # displying each version with a separated header
        for major in $( echo ${!versions_hash[@]} | sort -n )
        do

            # normalize version numbers
            # (note, use sed instead of bc to avoid introducing another dependency)
            if [ $major -ge 70 -a $major -le 96 ]; then
                current_version=$( echo $major | sed 's/\([[:digit:]]\)\([[:digit:]]\)/\1\.\2/' )
            else
                current_version=$(( major / 10 ))
            fi

            # drop away specific versions if the user required only
            # a few. All arguments, if any, are major version numbers,
            # so check on each of them to see if it makes match with the
            # current version, and if not, avoid printing this version.
            must_print=1 # always print a version group in default
            if [ $# -ge 1 ]; then
                must_print=0
                for required_major in $*
                do
                    if [ $current_version = $required_major ]; then
                        must_print=1
                        break
                    fi
                done

                if [ $must_print -ne 1 ]; then
                    pgenv_debug "Skip major version $current_version (required $*)"
                    continue
                fi
            fi

            echo "                PostgreSQL $current_version"
            echo "------------------*-----------------------------"
            printed=0
            for numeric in $( echo ${versions_hash[$major]} \
                                  | tr '-' '\n'  \
                                  | sort -V  )
            do
                # new line after 5 numbers
                if [ $printed -gt 5 ]; then
                    printed=0
                    echo
                fi

                # the output string will be 'a.b.cd'
                # therefore no more than 6 chars, left aligned
                printf " %-6s " $numeric
                printed=$(( printed +  1 ))
            done

            echo -e "\n\n"
        done
        exit
        ;;

    check)
        # check for all required dependencies
        pgenv_check_dependencies "verbose"
        exit
        ;;

    *)
        if [ $# -gt 0 ]; then
            echo "Unknown command \`$1\`"
        fi

        pgenvhelp
        exit 1
        ;;
esac
